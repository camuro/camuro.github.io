---
layout: post
title: ! 'リモートインターン ｜ バージョン管理（Git & GitHub）'
published: true
date: 2013-02-23 00:06
comments: true
categories:
- git
- github
- リモートインターン
- 黒い画面
tags: []
keywords:
- git
- github
- リモートインターン
- 黒い画面
---
今回はGitやGitHubなどのバージョン管理について学習していきました。

## Git
ゴール：Gitの基本を理解する。
やること：[tryGit](http://try.github.com/levels/1/challenges/1 "tryGit")をやる。
参照：[サルでもわかるgit入門](http://www.backlog.jp/git-guide/ "サルでもわかるgit入門")、[Pro Git](http://git-scm.com/book/ja "Pro Git")

## GitHub
ゴール：Githubに自分のリポジトリを作る。clone、pushができる。remote branchが作れる。pull --rebase、 stash、stash popに挑戦する。
提出課題：HTMLの項目でマークアップしたHTMLファイルを自分のリポジトリにアップロードする。

## git order

~~~
$ mkdir hoge
$ cd hoge
$ git init
$ git commit -m 'first commit'
$ git remote add origin git@github.com:username/hoge.git
$ git push origin master<
~~~

## git command
<table class="pure-table pure-table-bordered">
<tbody>
<tr>
<th style="text-align: left;">git init</th>
<td>ワーキングディレクトリをGitリポジトリにする。</td>
</tr>
<tr>
<th style="text-align: left;">git status</th>
<td>ワーキングディレクトリのワークツリーとインデックスの状態を確認する。</td>
</tr>
<tr>
<th style="text-align: left;">git log</th>
<td>リポジトリの変更履歴を確認する。</td>
</tr>
<tr>
<th style="text-align: left;">git add <em>files</em></th>
<td>filesをステージングする。</td>
</tr>
<tr>
<th style="text-align: left;">git add .</th>
<td>全てのファイルをステージングする。</td>
</tr>
<tr>
<th style="text-align: left;">git reset -- <em>files</em></th>
<td>filesのステージングを取り消す。</td>
</tr>
<tr>
<th style="text-align: left;">git reset</th>
<td>全てのファイルのステージングを取り消す。</td>
</tr>
<tr>
<th style="text-align: left;">git checkout -- <em>files</em></th>
<td>filesをステージからワーキングディレクトリへコピーする。</td>
</tr>
<tr>
<th style="text-align: left;">git commit -m "&lt;コメント&gt;"</th>
<td>メッセージ付きでコミットする。</td>
</tr>
<tr>
<th style="text-align: left;">git diff</th>
<td>変更されたファイルの差分を確認する。</td>
</tr>
<tr>
<th style="text-align: left;">git remote add <em>url</em>/<em>hoge</em>.git</th>
<td>リモートリポジトリを追加する。</td>
</tr>
<tr>
<th style="text-align: left;">git push -u origin master</th>
<td>リモートリポジトリにファイルを追加する。-uオプションを付けておくと、今後pushする時に、origin masterと打つ必要がなくなる。</td>
</tr>
<tr>
<th style="text-align: left;">git clone &lt;url&gt;</th>
<td>リモートリポジトリをローカルに複製する。</td>
</tr>
<tr>
<th style="text-align: left;">git pull&lt;repository&gt; &lt;refspec&gt;</th>
<td>リモートリポジトリのブランチの変更内容を取り込む。</td>
</tr>
<tr>
<th style="text-align: left;">git remote -v</th>
<td>登録されているリモートリポジトリの名前とURLを確認する。</td>
</tr>
<tr>
<th style="text-align: left;">git remote rm&lt;repository&gt;</th>
<td>登録されているリモートリポジトリを削除する。</td>
</tr>
<tr>
<th style="text-align: left;">git branch&lt;branchname&gt;</th>
<td>ブランチを作成する。</td>
</tr>
<tr>
<th style="text-align: left;">git checkout</th>
<td>履歴(またはステージ)から作業ディレクトリへファイルをコピーするために使う。条件によっては、ブランチを切り替える。</td>
</tr>
<tr>
<th style="text-align: left;">git merge&lt;branchname&gt;</th>
<td>他のコミットから変更を受け入れるための新しいコミットを作成する。</td>
</tr>
<tr>
<th style="text-align: left;">git cherry-pick</th>
<td>あるコミットからメッセージとパッチをコピーし、現在のブランチに新しいコミットを作る。</td>
</tr>
<tr>
<th style="text-align: left;">git rebase</th>
<td>merge の代替コマンド。複数のブランチを接ぎ木する。</td>
</tr>
</tbody>
</table>
「remote branchが作れる。pull --rebase、 stash、stash popに挑戦する。 」→このへんがまだ出来てないので、Web designer tutorialに移ってデザイン修行と並行してコードをGitHubにあげながら経験値をあげようと思ってます。
とりあえず、今回の学習でプログラマー・デザイナー共通チュートリアルでの学習が完了しました。
いざ、デザイン修行！
